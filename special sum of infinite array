'''

    Time Complexity:O(Q*(R-L))

    Space Complexity:O(1).

    Where Q is the number of given queries, and L and R are the give

'''





def sumInRanges(arr, n, queries, q):

    

    mod = 10**9 + 7

    
    #  It stores answer for each query.

    ans = []


    # Traversing the given queries

    for ranges in queries:

        # Substract 1 from both L and R to use it as 0-based indexing

        l = ranges[0] - 1

        r = ranges[1] - 1


        # It stores the sum

        sume = 0



        for i in range(l, r + 1):

            index = (i % n)

            sume = (sume + arr[index]) % mod



        sume %= mod

        # Add answer to each query

        ans.append(sume)



    return ans

